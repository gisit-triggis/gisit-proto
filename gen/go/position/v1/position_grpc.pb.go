// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: position/v1/position.proto

package positionv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PositionService_StreamPositionUpdates_FullMethodName = "/position.PositionService/StreamPositionUpdates"
	PositionService_UpdatePosition_FullMethodName        = "/position.PositionService/UpdatePosition"
	PositionService_GetAllPositions_FullMethodName       = "/position.PositionService/GetAllPositions"
)

// PositionServiceClient is the client API for PositionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PositionServiceClient interface {
	StreamPositionUpdates(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PositionUpdate, PositionResponse], error)
	UpdatePosition(ctx context.Context, in *PositionUpdate, opts ...grpc.CallOption) (*PositionResponse, error)
	GetAllPositions(ctx context.Context, in *GetAllPositionsRequest, opts ...grpc.CallOption) (*GetAllPositionsResponse, error)
}

type positionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPositionServiceClient(cc grpc.ClientConnInterface) PositionServiceClient {
	return &positionServiceClient{cc}
}

func (c *positionServiceClient) StreamPositionUpdates(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PositionUpdate, PositionResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PositionService_ServiceDesc.Streams[0], PositionService_StreamPositionUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PositionUpdate, PositionResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PositionService_StreamPositionUpdatesClient = grpc.ClientStreamingClient[PositionUpdate, PositionResponse]

func (c *positionServiceClient) UpdatePosition(ctx context.Context, in *PositionUpdate, opts ...grpc.CallOption) (*PositionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PositionResponse)
	err := c.cc.Invoke(ctx, PositionService_UpdatePosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *positionServiceClient) GetAllPositions(ctx context.Context, in *GetAllPositionsRequest, opts ...grpc.CallOption) (*GetAllPositionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllPositionsResponse)
	err := c.cc.Invoke(ctx, PositionService_GetAllPositions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PositionServiceServer is the server API for PositionService service.
// All implementations must embed UnimplementedPositionServiceServer
// for forward compatibility.
type PositionServiceServer interface {
	StreamPositionUpdates(grpc.ClientStreamingServer[PositionUpdate, PositionResponse]) error
	UpdatePosition(context.Context, *PositionUpdate) (*PositionResponse, error)
	GetAllPositions(context.Context, *GetAllPositionsRequest) (*GetAllPositionsResponse, error)
	mustEmbedUnimplementedPositionServiceServer()
}

// UnimplementedPositionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPositionServiceServer struct{}

func (UnimplementedPositionServiceServer) StreamPositionUpdates(grpc.ClientStreamingServer[PositionUpdate, PositionResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamPositionUpdates not implemented")
}
func (UnimplementedPositionServiceServer) UpdatePosition(context.Context, *PositionUpdate) (*PositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePosition not implemented")
}
func (UnimplementedPositionServiceServer) GetAllPositions(context.Context, *GetAllPositionsRequest) (*GetAllPositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPositions not implemented")
}
func (UnimplementedPositionServiceServer) mustEmbedUnimplementedPositionServiceServer() {}
func (UnimplementedPositionServiceServer) testEmbeddedByValue()                         {}

// UnsafePositionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PositionServiceServer will
// result in compilation errors.
type UnsafePositionServiceServer interface {
	mustEmbedUnimplementedPositionServiceServer()
}

func RegisterPositionServiceServer(s grpc.ServiceRegistrar, srv PositionServiceServer) {
	// If the following call pancis, it indicates UnimplementedPositionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PositionService_ServiceDesc, srv)
}

func _PositionService_StreamPositionUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PositionServiceServer).StreamPositionUpdates(&grpc.GenericServerStream[PositionUpdate, PositionResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PositionService_StreamPositionUpdatesServer = grpc.ClientStreamingServer[PositionUpdate, PositionResponse]

func _PositionService_UpdatePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PositionServiceServer).UpdatePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PositionService_UpdatePosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PositionServiceServer).UpdatePosition(ctx, req.(*PositionUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _PositionService_GetAllPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PositionServiceServer).GetAllPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PositionService_GetAllPositions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PositionServiceServer).GetAllPositions(ctx, req.(*GetAllPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PositionService_ServiceDesc is the grpc.ServiceDesc for PositionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PositionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "position.PositionService",
	HandlerType: (*PositionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdatePosition",
			Handler:    _PositionService_UpdatePosition_Handler,
		},
		{
			MethodName: "GetAllPositions",
			Handler:    _PositionService_GetAllPositions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamPositionUpdates",
			Handler:       _PositionService_StreamPositionUpdates_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "position/v1/position.proto",
}
