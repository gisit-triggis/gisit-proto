// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: routegenerator/v1/routegenerator.proto

package routegeneratorv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RouteGenerator_GenerateRoutes_FullMethodName = "/routegenerator.RouteGenerator/GenerateRoutes"
	RouteGenerator_AskAssistant_FullMethodName   = "/routegenerator.RouteGenerator/AskAssistant"
)

// RouteGeneratorClient is the client API for RouteGenerator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouteGeneratorClient interface {
	GenerateRoutes(ctx context.Context, in *GenerateRoutesRequest, opts ...grpc.CallOption) (*GenerateRoutesResponse, error)
	AskAssistant(ctx context.Context, in *AssistantRequest, opts ...grpc.CallOption) (*AssistantResponse, error)
}

type routeGeneratorClient struct {
	cc grpc.ClientConnInterface
}

func NewRouteGeneratorClient(cc grpc.ClientConnInterface) RouteGeneratorClient {
	return &routeGeneratorClient{cc}
}

func (c *routeGeneratorClient) GenerateRoutes(ctx context.Context, in *GenerateRoutesRequest, opts ...grpc.CallOption) (*GenerateRoutesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateRoutesResponse)
	err := c.cc.Invoke(ctx, RouteGenerator_GenerateRoutes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGeneratorClient) AskAssistant(ctx context.Context, in *AssistantRequest, opts ...grpc.CallOption) (*AssistantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssistantResponse)
	err := c.cc.Invoke(ctx, RouteGenerator_AskAssistant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouteGeneratorServer is the server API for RouteGenerator service.
// All implementations must embed UnimplementedRouteGeneratorServer
// for forward compatibility.
type RouteGeneratorServer interface {
	GenerateRoutes(context.Context, *GenerateRoutesRequest) (*GenerateRoutesResponse, error)
	AskAssistant(context.Context, *AssistantRequest) (*AssistantResponse, error)
	mustEmbedUnimplementedRouteGeneratorServer()
}

// UnimplementedRouteGeneratorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRouteGeneratorServer struct{}

func (UnimplementedRouteGeneratorServer) GenerateRoutes(context.Context, *GenerateRoutesRequest) (*GenerateRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateRoutes not implemented")
}
func (UnimplementedRouteGeneratorServer) AskAssistant(context.Context, *AssistantRequest) (*AssistantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskAssistant not implemented")
}
func (UnimplementedRouteGeneratorServer) mustEmbedUnimplementedRouteGeneratorServer() {}
func (UnimplementedRouteGeneratorServer) testEmbeddedByValue()                        {}

// UnsafeRouteGeneratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouteGeneratorServer will
// result in compilation errors.
type UnsafeRouteGeneratorServer interface {
	mustEmbedUnimplementedRouteGeneratorServer()
}

func RegisterRouteGeneratorServer(s grpc.ServiceRegistrar, srv RouteGeneratorServer) {
	// If the following call pancis, it indicates UnimplementedRouteGeneratorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RouteGenerator_ServiceDesc, srv)
}

func _RouteGenerator_GenerateRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGeneratorServer).GenerateRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGenerator_GenerateRoutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGeneratorServer).GenerateRoutes(ctx, req.(*GenerateRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGenerator_AskAssistant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssistantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGeneratorServer).AskAssistant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGenerator_AskAssistant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGeneratorServer).AskAssistant(ctx, req.(*AssistantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RouteGenerator_ServiceDesc is the grpc.ServiceDesc for RouteGenerator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RouteGenerator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "routegenerator.RouteGenerator",
	HandlerType: (*RouteGeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateRoutes",
			Handler:    _RouteGenerator_GenerateRoutes_Handler,
		},
		{
			MethodName: "AskAssistant",
			Handler:    _RouteGenerator_AskAssistant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "routegenerator/v1/routegenerator.proto",
}
